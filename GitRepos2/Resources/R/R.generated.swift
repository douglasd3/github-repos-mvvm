//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(identifier: "com.helabs.GitRepos2") ?? Bundle.main
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Settings.bundle`.
    static let settingsBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "Settings", pathExtension: "bundle")
    
    /// `bundle.url(forResource: "Settings", withExtension: "bundle")`
    static func settingsBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.settingsBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 3 images.
  struct image {
    /// Image `fork`.
    static let fork = Rswift.ImageResource(bundle: R.hostingBundle, name: "fork")
    /// Image `github`.
    static let github = Rswift.ImageResource(bundle: R.hostingBundle, name: "github")
    /// Image `star`.
    static let star = Rswift.ImageResource(bundle: R.hostingBundle, name: "star")
    
    /// `UIImage(named: "fork", bundle: ..., traitCollection: ...)`
    static func fork(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fork, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "github", bundle: ..., traitCollection: ...)`
    static func github(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.github, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "star", bundle: ..., traitCollection: ...)`
    static func star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `PullRequestCell`.
    static let pullRequestCell = _R.nib._PullRequestCell()
    /// Nib `RepositoryCell`.
    static let repositoryCell = _R.nib._RepositoryCell()
    
    /// `UINib(name: "PullRequestCell", in: bundle)`
    static func pullRequestCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pullRequestCell)
    }
    
    /// `UINib(name: "RepositoryCell", in: bundle)`
    static func repositoryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.repositoryCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `PullRequestCell`.
    static let pullRequestCell: Rswift.ReuseIdentifier<PullRequestCell> = Rswift.ReuseIdentifier(identifier: "PullRequestCell")
    /// Reuse identifier `RepositoryCell`.
    static let repositoryCell: Rswift.ReuseIdentifier<RepositoryCell> = Rswift.ReuseIdentifier(identifier: "RepositoryCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `RepositoriesListViewController`, and contains static references to 1 segues.
    struct repositoriesListViewController {
      /// Segue identifier `DetailSegue`.
      static let detailSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RepositoriesListViewController, RepositoryDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "DetailSegue")
      
      /// Optionally returns a typed version of segue `DetailSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func detailSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RepositoriesListViewController, RepositoryDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.repositoriesListViewController.detailSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _RepositoryCell.validate()
    }
    
    struct _PullRequestCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PullRequestCell
      
      let bundle = R.hostingBundle
      let identifier = "PullRequestCell"
      let name = "PullRequestCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PullRequestCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PullRequestCell
      }
      
      fileprivate init() {}
    }
    
    struct _RepositoryCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = RepositoryCell
      
      let bundle = R.hostingBundle
      let identifier = "RepositoryCell"
      let name = "RepositoryCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> RepositoryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RepositoryCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "star") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star' is used in nib 'RepositoryCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fork") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fork' is used in nib 'RepositoryCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Main"
      let repositoriesListViewController = StoryboardViewControllerResource<RepositoriesListViewController>(identifier: "RepositoriesListViewController")
      let repositoryDetailViewController = StoryboardViewControllerResource<RepositoryDetailViewController>(identifier: "RepositoryDetailViewController")
      
      func repositoriesListViewController(_: Void = ()) -> RepositoriesListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: repositoriesListViewController)
      }
      
      func repositoryDetailViewController(_: Void = ()) -> RepositoryDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: repositoryDetailViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.main().repositoryDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'repositoryDetailViewController' could not be loaded from storyboard 'Main' as 'RepositoryDetailViewController'.") }
        if _R.storyboard.main().repositoriesListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'repositoriesListViewController' could not be loaded from storyboard 'Main' as 'RepositoriesListViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}